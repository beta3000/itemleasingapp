{"version":3,"file":"http.module.js","sourceRoot":"","sources":["../../../src/platform/http/http.module.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAE,QAAQ,EAAuB,QAAQ,EAAE,cAAc,EAAY,MAAM,eAAe,CAAC;AAClG,OAAO,EAAE,UAAU,EAAE,IAAI,EAAE,MAAM,eAAe,CAAC;AAEjD,OAAO,EAAE,sBAAsB,EAA0B,MAAM,yCAAyC,CAAC;AACzG,OAAO,EAAE,2BAA2B,EAAE,MAAM,qDAAqD,CAAC;AAElG,MAAM,CAAC,IAAM,WAAW,GAA+B,IAAI,cAAc,CAAa,aAAa,CAAC,CAAC;AAIrG,MAAM,sBAAsB,IAAU,EAAE,QAAkB,EAAE,MAAkB;IAC5E,MAAM,CAAC,IAAI,sBAAsB,CAAC,IAAI,EAAE,QAAQ,EAAE,IAAI,2BAA2B,EAAE,EAAE,MAAM,CAAC,YAAY,CAAC,CAAC;AAC5G,CAAC;AAED,MAAM,CAAC,IAAM,yBAAyB,GAAa;IACjD,OAAO,EAAE,sBAAsB;IAC/B,UAAU,EAAE,WAAW;IACvB,IAAI,EAAE,CAAC,IAAI,EAAE,QAAQ,EAAE,WAAW,CAAC;CACpC,CAAC;AAOF,IAAa,kBAAkB;IAA/B;IAYA,CAAC;IAXQ,0BAAO,GAAd,UAAe,MAAuC;QAAvC,uBAAA,EAAA,WAAsB,YAAY,EAAE,EAAE,EAAC;QACpD,MAAM,CAAC;YACL,QAAQ,EAAE,oBAAkB;YAC5B,SAAS,EAAE,CAAC;oBACR,OAAO,EAAE,WAAW;oBACpB,QAAQ,EAAE,MAAM;iBACjB;gBACD,yBAAyB;aAC1B;SACF,CAAC;IACJ,CAAC;IACH,yBAAC;AAAD,CAAC,AAZD,IAYC;AAZY,kBAAkB;IAL9B,QAAQ,CAAC;QACR,OAAO,EAAE;YACP,UAAU;SACX;KACF,CAAC;GACW,kBAAkB,CAY9B;SAZY,kBAAkB","sourcesContent":["import { NgModule, ModuleWithProviders, Injector, InjectionToken, Provider } from '@angular/core';\nimport { HttpModule, Http } from '@angular/http';\n\nimport { HttpInterceptorService, IHttpInterceptorConfig } from './interceptors/http-interceptor.service';\nimport { URLRegExpInterceptorMatcher } from './interceptors/url-regexp-interceptor-matcher.class';\n\nexport const HTTP_CONFIG: InjectionToken<HttpConfig> = new InjectionToken<HttpConfig>('HTTP_CONFIG');\n\nexport type HttpConfig = {interceptors: IHttpInterceptorConfig[]};\n\nexport function httpFactory(http: Http, injector: Injector, config: HttpConfig): HttpInterceptorService {\n  return new HttpInterceptorService(http, injector, new URLRegExpInterceptorMatcher(), config.interceptors);\n}\n\nexport const HTTP_INTERCEPTOR_PROVIDER: Provider = {\n  provide: HttpInterceptorService,\n  useFactory: httpFactory,\n  deps: [Http, Injector, HTTP_CONFIG],\n};\n\n@NgModule({\n  imports: [\n    HttpModule,\n  ],\n})\nexport class CovalentHttpModule {\n  static forRoot(config: HttpConfig = {interceptors: []}): ModuleWithProviders {\n    return {\n      ngModule: CovalentHttpModule,\n      providers: [{\n          provide: HTTP_CONFIG,\n          useValue: config,\n        },\n        HTTP_INTERCEPTOR_PROVIDER,\n      ],\n    };\n  }\n}\n"]}